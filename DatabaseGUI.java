/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.*;
import java.sql.*;


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Locale;

/**
 *
 * @author Jonathan Placatka, Mark Lysack, Alborz Khakbazan, Ying Liang
 */

public class DatabaseGUI extends javax.swing.JFrame {

    public boolean stateQuery;
    String selected;
    String classSelected;
    String itemSelected;
    String mapSelected;
    String championSelected;
    String statSelected;
    String skinlineSelected;
    String itemstatSelected;


    Connection connection;

    String currentQuery;


    /**
     * Creates new form test
     */
    public DatabaseGUI() {

        // ------------------------------------------------
        // INITIALIZATION
        // ------------------------------------------------

        // CREATE DATABASE CONNECTION
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:league.db");
        }
        catch (SQLException e) { }

        // INITIALIZE GUI DATA
        initComponents();
        stateQuery = false;
        selected = "Champions";
        classSelected = "Assassins";
        itemSelected = "Abyssal Mask";
        mapSelected = "Summoners Rift";
        championSelected = "Aatrox";
        statSelected = "HP";
        skinlineSelected = "Academy";
        itemstatSelected = "HP";
        txtResults.setEditable(false);
        hideQueries();
        hideSelects();
        hideResults();
        showTables();
    }

    // INITIALIZE GUI DISPLAY
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imgLogo = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        cmbTables = new javax.swing.JComboBox<>();
        cmbQueries = new javax.swing.JComboBox<>();
        lblSelect = new javax.swing.JLabel();
        lblSelectInput = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        btnQueries = new javax.swing.JButton();
        btnTables = new javax.swing.JButton();
        cmbClassSelect = new javax.swing.JComboBox<>();
        cmbStatSelect = new javax.swing.JComboBox<>();
        cmbItemStatSelect = new javax.swing.JComboBox<>();
        cmbGameModeSelect = new javax.swing.JComboBox<>();
        cmbChampionSelect = new javax.swing.JComboBox<>();
        cmbSkinLineSelect = new javax.swing.JComboBox<>();
        cmbItemSelect = new javax.swing.JComboBox<>();
        lblResultsHead = new javax.swing.JLabel();
        lblResults = new javax.swing.JLabel();
        scrResults = new javax.swing.JScrollPane();
        txtResults = new javax.swing.JTextPane();
        btnResultsSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        imgBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(720, 720));
        setResizable(false);
        getContentPane().setLayout(null);

        imgLogo.setIcon(new javax.swing.ImageIcon("logo.png")); // NOI18N
        getContentPane().add(imgLogo);
        imgLogo.setBounds(220, 120, 284, 130);

        lblLogo.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        lblLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogo.setText("DATABASE UTILITY");
        lblLogo.setToolTipText("");
        getContentPane().add(lblLogo);
        lblLogo.setBounds(228, 256, 270, 18);

        cmbTables.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbTables.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Champions", "Abilities", "Skins", "Items", "Runes", "Summoner Spells", "Maps", "Game Modes", "Ability Cooldowns", "Ability Costs", "Ability Ranges", "Ability Tags", "Item Builds-From", "Item Builds-Into", "Item Colloquialisms", "Item Stats", "Rune Descriptions", "Popular Items", "Popular Runes", "Popular Spells", "Items Available", "Runes Available", "Spells Available", "Ally Tips", "Enemy Tips" }));
        cmbTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTablesActionPerformed(evt);
            }
        });
        getContentPane().add(cmbTables);
        cmbTables.setBounds(350, 360, 230, 28);

        cmbQueries.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbQueries.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Most popular build for a given champion", "Most well-rounded champions within a class", "Most versatile champions within a class", "Champions who use a mana-alternative within a class", "Champions by lowest basic ability cooldown in a class", "Available champion skins by skinline", "All fully built items", "Most popular items to build a given item into", "Champions at max level with the highest value for a stat", "Items by their stat/cost efficiency given a stat", "Most popular keystone runes within a class", "Game modes available given a map", "Relevant ally/enemy tips given a champion" }));
        cmbQueries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbQueriesActionPerformed(evt);
            }
        });
        getContentPane().add(cmbQueries);
        cmbQueries.setBounds(350, 360, 310, 28);

        lblSelect.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        lblSelect.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSelect.setText("Select a table to return contents for: ");
        getContentPane().add(lblSelect);
        lblSelect.setBounds(110, 365, 230, 18);

        lblSelectInput.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        lblSelectInput.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        getContentPane().add(lblSelectInput);
        lblSelectInput.setBounds(110, 427, 230, 20);

        btnOpen.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        btnOpen.setText("Get Results");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        getContentPane().add(btnOpen);
        btnOpen.setBounds(310, 643, 90, 30);

        btnQueries.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        btnQueries.setText("Queries");
        btnQueries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueriesActionPerformed(evt);
            }
        });
        getContentPane().add(btnQueries);
        btnQueries.setBounds(620, 643, 80, 30);

        btnTables.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        btnTables.setText("Tables");
        btnTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablesActionPerformed(evt);
            }
        });
        getContentPane().add(btnTables);
        btnTables.setBounds(620, 643, 80, 30);

        cmbClassSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbClassSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Assassins", "Fighters", "Mages", "Marksmen", "Supports", "Tanks" }));
        cmbClassSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClassSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbClassSelect);
        cmbClassSelect.setBounds(350, 420, 100, 28);

        cmbStatSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbStatSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HP", "MP", "HP Regen", "MP Regen", "Armor", "Magic Resist", "Crit", "Attack Damage", "Attack Speed"}));
        cmbStatSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbStatSelect);
        cmbStatSelect.setBounds(350, 420, 110, 28);

        cmbItemStatSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbItemStatSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HP", "MP", "HP Regen", "Armor", "Magic Resist", "Crit", "Ability Power", "Attack Damage", "Attack Speed", "Life Steal", "Move Speed" }));
        cmbItemStatSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemStatSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbItemStatSelect);
        cmbItemStatSelect.setBounds(350, 420, 110, 28);

        cmbGameModeSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbGameModeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Summoners Rift", "Howling Abyss", "Teamfight Tactics", "Nexus Blitz" }));
        cmbGameModeSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGameModeSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbGameModeSelect);
        cmbGameModeSelect.setBounds(350, 420, 150, 28);

        cmbChampionSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbChampionSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aatrox", "Ahri", "Akali", "Alistar", "Amumu", "Anivia", "Annie", "Aphelios", "Ashe", "Aurelion Sol", "Azir", "Bard", "Blitzcrank", "Brand", "Braum", "Caitlyn", "Camille", "Cassiopeia", "Cho'Gath", "Corki", "Darius", "Diana", "Dr. Mundo", "Draven", "Ekko", "Elise", "Evelynn", "Ezreal", "Fiddlesticks", "Fiora", "Fizz", "Galio", "Gangplank", "Garen", "Gnar", "Gragas", "Graves", "Hecarim", "Heimerdinger", "Illaoi", "Irelia", "Ivern", "Janna", "Jarvan IV", "Jax", "Jayce", "Jhin", "Jinx", "Kai'Sa", "Kalista", "Karma", "Karthus", "Kassadin", "Katarina", "Kayle", "Kayn", "Kennen", "Kha'Zix", "Kindred", "Kled", "Kog'Maw", "LeBlanc", "Lee Sin", "Leona", "Lillia", "Lissandra", "Lucian", "Lulu", "Lux", "Malphite", "Malzahar", "Maokai", "Master Yi", "Miss Fortune", "Mordekaiser", "Morgana", "Nami", "Nasus", "Nautilus", "Neeko", "Nidalee", "Nocturne", "Nunu and Willump", "Olaf", "Orianna", "Ornn", "Pantheon", "Poppy", "Pyke", "Qiyana", "Quinn", "Rakan", "Rammus", "Rek'Sai", "Rell", "Renekton", "Rengar", "Riven", "Rumble", "Ryze", "Samira", "Sejuani", "Senna", "Seraphine", "Sett", "Shaco", "Shen", "Shyvana", "Singed", "Sion", "Sivir", "Skarner", "Sona", "Soraka", "Swain", "Sylas", "Syndra", "Tahm Kench", "Taliyah", "Talon", "Taric", "Teemo", "Thresh", "Tristana", "Trundle", "Tryndamere", "Twisted Fate", "Twitch", "Udyr", "Urgot", "Varus", "Vayne", "Veigar", "Vel'Koz", "Vi", "Viktor", "Vladimir", "Volibear", "Warwick", "Wukong", "Xayah", "Xerath", "Xin Zhao", "Yasuo", "Yone", "Yorick", "Yuumi", "Zac", "Zed", "Ziggs", "Zilean", "Zoe", "Zyra" }));
        cmbChampionSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbChampionSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbChampionSelect);
        cmbChampionSelect.setBounds(350, 420, 100, 28);

        cmbSkinLineSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbSkinLineSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Academy", "Arcade", "Arcana", "Arcane", "Arcanist", "Arclight", "Arctic Ops", "Astronaut", "Battle Academia", "Battle Boss", "Battle Queen", "Battlecast", "Beast Hunter", "Bee", "Bewitching", "Blackfrost", "Blood Moon", "Cafe Cuties", "Challenger", "Championship", "Commando", "Conqueror", "Cottontail", "Coven", "Crime City", "Crimson Elite", "Crystal Rose", "Cyber Pop", "Dark Star", "Dawnbringer", "Death Blossom", "Death Sworn", "Debonair", "Definitely Not", "Demacia Vice", "Dragonslayer", "Dragon Trainer", "Dreadknight", "Dreadnova", "DWG", "Elderwood", "Eternum", "Firecracker", "Fnatic", "Forsaken", "FPX", "Freljord", "Full Metal", "Galactic", "God-King", "Guardian of the Sands", "Headhunter", "Heartseeker", "Hextech", "High Noon", "iG", "Infernal", "Justicar", "K/DA", "Lancer", "Lunar", "Mad Scientist", "Marauder", "Mecha", "Nightbringer", "Odyssey", "Old God", "Omega Squad", "Order of the Lotus", "Pajama Guardian", "Papercraft", "PAX", "Pentakill", "Pharaoh", "Piltover Customs", "Pool Party", "Praetorian", "Prehistoric", "Program", "PROJECT", "PsyOps", "Pulsefire", "Resistance", "Riot", "Ruined", "Secret Agent", "Sentinel", "Shan Hai Scrolls", "SKT T1", "Snow Day", "Space Groove", "Spirit Blossom", "SSG", "SSW", "Star Guardian", "Steel Legion", "Sugar Rush", "Super Galaxy", "Tango", "Thunder Lord", "TPA", "Traditional", "True Damage", "Vandal", "Victorious", "Warden", "Warring Kingdoms", "Winter Wonder", "Withered Rose", "Woad", "Worldbreaker", "Zombie" }));
        cmbSkinLineSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSkinLineSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSkinLineSelect);
        cmbSkinLineSelect.setBounds(350, 420, 190, 28);

        cmbItemSelect.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        cmbItemSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Abyssal Mask", "Aegis of the Legion", "Aether Wisp", "Amplifying Tome", "Anathemas Chains", "Archangels Staff", "Ardent Censer", "B. F. Sword", "Bamis Cinder", "Bandleglass Mirror", "Banshees Veil", "Berserkers Greaves", "Black Cleaver", "Black Mist Scythe", "Blade of The Ruined King", "Blasting Wand", "Blighting Jewel", "Bloodthirster", "Boots", "Boots of Swiftness", "Bramble Vest", "Broken Stopwatch", "Broken Stopwatch", "Bulwark of the Mountain", "Caulfields Warhammer", "Chain Vest", "Chempunk Chainsword", "Chemtech Putrifier", "Cloak of Agility", "Cloth Armor", "Commencing Stopwatch", "Control Ward", "Corrupting Potion", "Cosmic Drive", "Crystalline Bracer", "Cull", "Dagger", "Dark Seal", "Dead Mans Plate", "Deaths Dance", "Demonic Embrace", "Divine Sunderer", "Dorans Blade", "Dorans Ring", "Dorans Shield", "Duskblade of Draktharr", "Eclipse", "Edge of Night", "Elixir of Iron", "Elixir of Sorcery", "Elixir of Wrath", "Emberknife", "Essence Reaver", "Everfrost", "Executioners Calling", "Eye of the Herald", "Faerie Charm", "Farsight Alteration", "Fiendish Codex", "Forbidden Idol", "Force of Nature", "Frostfang", "Frostfire Gauntlet", "Frozen Heart", "Galeforce", "Gargoyle Stoneplate", "Giants Belt", "Glacial Buckler", "Goredrinker", "Guardian Angel", "Guardians Blade", "Guardians Hammer", "Guardians Horn", "Guardians Orb", "Guinsoos Rageblade", "Hailblade", "Harrowing Crescent", "Health Potion", "Hearthbound Axe", "Hexdrinker", "Hextech Alternator", "Hextech Rocketbelt", "Horizon Focus", "Hullbreaker", "Immortal Shieldbow", "Imperial Mandate", "Infinity Edge", "Ionian Boots of Lucidity", "Ironspike Whip", "Kalistas Black Spear", "Kalistas Black Spear", "Kindlegem", "Kircheis Shard", "Knights Vow", "Kraken Slayer", "Last Whisper", "Leeching Leer", "Liandrys Anguish", "Lich Bane", "Locket of the Iron Solari", "Long Sword", "Lord Dominiks Regards", "Lost Chapter", "Ludens Tempest", "Manamune", "Maw of Malmortius", "Mejais Soulstealer", "Mercurial Scimitar", "Mercurys Treads", "Mikaels Blessing", "Minion Dematerializer", "Mobility Boots", "Moonstone Renewer", "Morellonomicon", "Mortal Reminder", "Muramana", "Nashors Tooth", "Navori Quickblades", "Needlessly Large Rod", "Negatron Cloak", "Night Harvester", "Noonquiver", "Null-Magic Mantle", "Oblivion Orb", "Oracle Lens", "Pauldrons of Whiterock", "Perfectly Timed Stopwatch", "Phage", "Phantom Dancer", "Pickaxe", "Plated Steelcaps", "Poro-Snax", "Prowlers Claw", "Quicksilver Sash", "Rabadons Deathcap", "Rageknife", "Randuins Omen", "Rapid Firecannon", "Ravenous Hydra", "Recurve Bow", "Redemption", "Refillable Potion", "Rejuvenation Bead", "Relic Shield", "Riftmaker", "Ruby Crystal", "Runaans Hurricane", "Runesteel Spaulders", "Rylais Crystal Scepter", "Sapphire Crystal", "Scarecrow Effigy", "Seekers Armguard", "Seraphs Embrace", "Serpents Fang", "Serrated Dirk", "Seryldas Grudge", "Shard of True Ice", "Sheen", "Shurelyas Battlesong", "Silvermere Dawn", "Slightly Magical Footwear", "Sorcerers Shoes", "Spectral Sickle", "Spectres Cowl", "Spellthiefs Edge", "Spirit Visage", "Staff of Flowing Water", "Stealth Ward", "Steel Shoulderguards", "Steraks Gage", "Stopwatch", "Stormrazor", "Stridebreaker", "Sunfire Aegis", "Targons Buckler", "Tear of the Goddess", "The Collector", "The Golden Spatula", "Thornmail", "Tiamat", "Titanic Hydra", "Total Biscuit of Everlasting Will", "Trinity Force", "Turbo Chemtank", "Umbral Glaive", "Vampiric Scepter", "Verdant Barrier", "Vigilant Wardstone", "Void Staff", "Wardens Mail", "Warmogs Armor", "Watchful Wardstone", "Winged Moonplate", "Wits End", "Youmuus Ghostblade", "Your Cut", "Zeal", "Zekes Convergence", "Zhonyas Hourglass" }));
        cmbItemSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbItemSelectActionPerformed(evt);
            }
        });
        getContentPane().add(cmbItemSelect);
        cmbItemSelect.setBounds(350, 420, 180, 28);

        lblResultsHead.setFont(new java.awt.Font("Corbel", 1, 14)); // NOI18N
        lblResultsHead.setText("SHOWING RESULTS FOR:");
        getContentPane().add(lblResultsHead);
        lblResultsHead.setBounds(20, 20, 180, 14);

        lblResults.setFont(new java.awt.Font("Corbel", 0, 14)); // NOI18N
        getContentPane().add(lblResults);
        lblResults.setBounds(220, 20, 470, 14);

        txtResults.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        txtResults.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        scrResults.setViewportView(txtResults);

        getContentPane().add(scrResults);
        scrResults.setBounds(20, 50, 670, 580);

        btnResultsSave.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        btnResultsSave.setText("Save as File");
        btnResultsSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultsSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnResultsSave);
        btnResultsSave.setBounds(600, 643, 100, 30);

        btnBack.setFont(new java.awt.Font("Corbel", 0, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(10, 643, 70, 30);

        imgBackground.setIcon(new javax.swing.ImageIcon("background.jpg")); // NOI18N
        getContentPane().add(imgBackground);
        imgBackground.setBounds(0, 0, 720, 720);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // ------------------------------------------------
    // EVENT LISTENERS
    // ------------------------------------------------

    // SWITCHES TO QUERIES PAGE
    private void btnQueriesActionPerformed(java.awt.event.ActionEvent evt) {
        hideTables();
        showQueries();
        selected = "Most popular build for a given champion";
        lblSelectInput.setText("Select a champion for this query:");
        championSelected = "Aatrox";
        cmbChampionSelect.setVisible(true);
        lblSelectInput.setVisible(true);
        stateQuery = true;
    }

    // SWITCHES TO TABLES PAGE
    private void btnTablesActionPerformed(java.awt.event.ActionEvent evt) {
        hideQueries();
        hideSelects();
        showTables();
        selected = "Champions";
        stateQuery = false;
    }

    // SWITCHES TO RESULTS PAGE
    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {
        hideHome();
        if (stateQuery){
            hideQueries();
            hideSelects();
            queryResults();
        }
        else{
            hideTables();
            tableResults();
        }
        showResults();

    }

    // SAVES RESULTS TO CSV FROM RESULTS
    private void btnResultsSaveActionPerformed(java.awt.event.ActionEvent evt) {
        generateCSV(currentQuery);
    }

    // RETURNS TO PREVIOUS PAGE FROM RESULTS
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {
        hideResults();
        if (stateQuery)
            showQueries();
            lblSelectInput.setVisible(true);
            if (selected.equals("Most popular build for a given champion")){
                lblSelectInput.setText("Select a champion for this query:");
                cmbChampionSelect.setVisible(true);
            }            
            else if (selected.equals("Most versatile champions within a class")){
                cmbClassSelect.setVisible(true);
            }
            else if (selected.equals("Champions by lowest basic ability cooldown in a class")){
                cmbClassSelect.setVisible(true);
            }
            else if (selected.equals("Available champion skins by skinline")){
                cmbSkinLineSelect.setVisible(true);
            }
            else if (selected.equals("All fully built items")){
            }
            else if (selected.equals("Most popular items to build a given item into")){
                cmbItemSelect.setVisible(true);
            }
            else if (selected.equals("Champions at max level with the highest value for a stat")){
                cmbStatSelect.setVisible(true);
            }
            else if (selected.equals("Items by their stat/cost efficiency given a stat")){
                cmbItemStatSelect.setVisible(true);
            }
            else if (selected.equals("Most popular keystone runes within a class")){
                cmbClassSelect.setVisible(true);
            }
            else if (selected.equals("Game modes available given a map")){
                cmbGameModeSelect.setVisible(true);
            }
            else if (selected.equals("Most well-rounded champions within a class")){
                cmbClassSelect.setVisible(true);
            }
            else if (selected.equals("Champions who use a mana-alternative within a class")){
                cmbClassSelect.setVisible(true);
            }
            else if (selected.equals("Relevant ally/enemy tips given a champion")){
                cmbChampionSelect.setVisible(true);
            }
            else{
            hideSelects();
            showTables();}
        showHome();
    }

    // SELECTS A QUERY FROM QUERY DROPDOWN AND DISPLAYS ADDITIONAL PROMPTS
    private void cmbQueriesActionPerformed(java.awt.event.ActionEvent evt) {
        hideSelects();
        lblSelectInput.setVisible(true);
        selected = cmbQueries.getSelectedItem().toString();

        if (selected.equals("Most popular build for a given champion")){
            lblSelectInput.setText("Select a champion for this query:");
            cmbChampionSelect.setVisible(true);
        }
        else if (selected.equals("Most versatile champions within a class")){
            lblSelectInput.setText("Select a class for this query:");
            cmbClassSelect.setVisible(true);
        }
        else if (selected.equals("Champions by lowest basic ability cooldown in a class")){
            lblSelectInput.setText("Select a class for this query:");
            cmbClassSelect.setVisible(true);
        }
        else if (selected.equals("Available champion skins by skinline")){
            lblSelectInput.setText("Select a skinline for this query:");
            cmbSkinLineSelect.setVisible(true);
        }
        else if (selected.equals("All fully built items")){
            lblSelectInput.setText("");
        }
        else if (selected.equals("Most popular items to build a given item into")){
            lblSelectInput.setText("Select an item for this query:");
            cmbItemSelect.setVisible(true);
        }
        else if (selected.equals("Champions at max level with the highest value for a stat")){
            lblSelectInput.setText("Select a stat for this query:");
            cmbStatSelect.setVisible(true);
        }
        else if (selected.equals("Items by their stat/cost efficiency given a stat")){
            lblSelectInput.setText("Select an item stat for this query:");
            cmbItemStatSelect.setVisible(true);
        }
        else if (selected.equals("Most popular keystone runes within a class")){
            lblSelectInput.setText("Select a class for this query:");
            cmbClassSelect.setVisible(true);
        }
        else if (selected.equals("Game modes available given a map")){
            lblSelectInput.setText("Select a map for this query:");
            cmbGameModeSelect.setVisible(true);
        }
        else if (selected.equals("Most well-rounded champions within a class")){
            lblSelectInput.setText("Select a class for this query:");
            cmbClassSelect.setVisible(true);
        }
        else if (selected.equals("Champions who use a mana-alternative within a class")){
            lblSelectInput.setText("Select a class for this query:");
            cmbClassSelect.setVisible(true);
        }
        else if (selected.equals("Relevant ally/enemy tips given a champion")){
            lblSelectInput.setText("Select a champion for this query:");
            cmbChampionSelect.setVisible(true);
        }
    }

    // SELECTS A TABLE FROM TABLE DROPDOWN
    private void cmbTablesActionPerformed(java.awt.event.ActionEvent evt) {
        selected = cmbTables.getSelectedItem().toString();
    }

    // SELECTS A CLASS FROM CLASS DROPDOWN
    private void cmbClassSelectActionPerformed(java.awt.event.ActionEvent evt) {
        classSelected = cmbClassSelect.getSelectedItem().toString();
    }

    // SELECTS A GAME MODE FROM GAME MODE DROPDOWN
    private void cmbGameModeSelectActionPerformed(java.awt.event.ActionEvent evt) {
        mapSelected = cmbGameModeSelect.getSelectedItem().toString();
    }

    // SELECTS AN ITEM FROM ITEM DROPDOWN
    private void cmbItemSelectActionPerformed(java.awt.event.ActionEvent evt) {
        itemSelected = cmbItemSelect.getSelectedItem().toString();
    }

    // SELECTS A CHAMPION FROM CHAMPION DROPDOWN
    private void cmbChampionSelectActionPerformed(java.awt.event.ActionEvent evt) {
        championSelected = cmbChampionSelect.getSelectedItem().toString();
    }

    // SELECTS A STAT FROM STAT DROPDOWN
    private void cmbStatSelectActionPerformed(java.awt.event.ActionEvent evt) {
        statSelected = cmbStatSelect.getSelectedItem().toString();
    }

    // SELECTS AN ITEM STAT FROM ITEM STAT DROPDOWN
    private void cmbItemStatSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbItemStatSelectActionPerformed
        itemstatSelected = cmbItemStatSelect.getSelectedItem().toString();
    }

    // SELECTS A SKINLINE FROM SKINLINE DROPDOWN
    private void cmbSkinLineSelectActionPerformed(java.awt.event.ActionEvent evt) {
        skinlineSelected = cmbSkinLineSelect.getSelectedItem().toString();
    }



    // ------------------------------------------------
    // HIDE/SHOW PAGES
    // ------------------------------------------------

    // HIDES / SHOWS QUERIES PAGE
    private void hideQueries(){
        cmbQueries.setVisible(false);
        lblSelect.setVisible(false);
        btnTables.setVisible(false);
    }
    private void showQueries(){
        cmbQueries.setVisible(true);
        lblSelect.setVisible(true);
        btnTables.setVisible(true);
        lblSelect.setText("Select a query to return results for:");
    }

    // HIDES ALL SELECT DROPDOWNS
    private void hideSelects(){
        lblSelectInput.setVisible(false);
        cmbChampionSelect.setVisible(false);
        cmbItemSelect.setVisible(false);
        cmbGameModeSelect.setVisible(false);
        cmbStatSelect.setVisible(false);
        cmbClassSelect.setVisible(false);
        cmbSkinLineSelect.setVisible(false);
        cmbItemStatSelect.setVisible(false);
    }

    // HIDES / SHOWS TABLES PAGE
    private void hideTables(){
        lblSelect.setVisible(false);
        cmbTables.setVisible(false);
        btnQueries.setVisible(false);
    }
    private void showTables(){
        lblSelect.setVisible(true);
        cmbTables.setVisible(true);
        btnQueries.setVisible(true);
        lblSelect.setText("Select a table to return contents for:");
    }

    // HIDES / SHOWS COMMON HOME PAGE FEATURES
    private void hideHome(){
        btnOpen.setVisible(false);
        imgLogo.setVisible(false);
        lblLogo.setVisible(false);
    }
    private void showHome(){
        btnOpen.setVisible(true);
        imgLogo.setVisible(true);
        lblLogo.setVisible(true);
    }

    // HIDES / SHOWS RESULTS PAGE
    private void hideResults(){
        scrResults.setVisible(false);
        txtResults.setVisible(false);
        lblResultsHead.setVisible(false);
        lblResults.setVisible(false);
        btnBack.setVisible(false);
        btnResultsSave.setVisible(false);
    }
    private void showResults(){
        scrResults.setVisible(true);
        txtResults.setVisible(true);
        lblResultsHead.setVisible(true);
        lblResults.setVisible(true);
        btnBack.setVisible(true);
        btnResultsSave.setVisible(true);

        txtResults.setCaretPosition(0);
    }

    // ------------------------------------------------
    // PARSE SELECTS
    // ------------------------------------------------

    // TAKES IN A SELECTED CLASS AND RETURNS ITS DATABASE EQUIVALENT NAME
    private String parseClass(String classSelected){
        String result;
        if (classSelected.equals("Marksmen")){
            result = "Marksman";
        }
        else{
            result = classSelected.substring(0,classSelected.length()-1);
        }
        return result;
    }

    // TAKES IN A SELECTED ITEM STAT AND RETURNS ITS DATABASE EQUIVALENT NAME
    private String parseItemStat(String itemstatSelected){
        String result = "";
        if (itemstatSelected.equals("HP")){
            result = "FlatHPPoolMod";
        }
        else if (itemstatSelected.equals("HP Regen")){
            result = "FlatHPRegenMod";
        }
        else if (itemstatSelected.equals("MP")){
            result = "FlatMPPoolMod";
        }
        else if (itemstatSelected.equals("Armor")){
            result = "FlatArmorMod";
        }
        else if (itemstatSelected.equals("Magic Resist")){
            result = "FlatSpellBlockMod";
        }
        else if (itemstatSelected.equals("Crit")){
            result = "FlatCritChanceMod";
        }
        else if (itemstatSelected.equals("Ability Power")){
            result = "FlatMagicDamageMod";
        }
        else if (itemstatSelected.equals("Attack Damage")){
            result = "FlatPhysicalDamageMod";
        }
        else if (itemstatSelected.equals("Attack Speed")){
            result = "PercentAttackSpeedMod";
        }
        else if (itemstatSelected.equals("Life Steal")){
            result = "PercentLifeStealMod";
        }
        else if (itemstatSelected.equals("Move Speed")){
            result = "PercentMovementSpeedMod";
        }
        return result;
    }

    // TAKES IN A SELECTED CHAMP STAT AND RETURNS ITS DATABASE EQUIVALENT NAME
    private String parseChampStat(String statSelected){
        String result = statSelected.replaceAll("\\s", "");
        return result;
    }

    // ------------------------------------------------
    // GENERATE QUERIES
    // ------------------------------------------------

    // GENERATES A QUERY FOR A QUERY SELECTION
    private void queryResults(){
        String parseSelected;
        if (selected.equals("Most popular build for a given champion")){
            lblResults.setText("MOST POPULAR " + championSelected.toUpperCase() + " BUILD");
            currentQuery =
                    "select 'Item' as Type, i.Name as Name from Champion c\n" +
                            "left join PopularItems pi on c.RefKeys = pi.ChampionKey\n" +
                            "left join Item i on i.ID = pi.ItemID\n" +
                            "where c.Name='"+ championSelected +"'\n" +
                            "UNION\n" +
                            "select 'Rune' as Type, r.Name as Name from Champion c\n" +
                            "left join PopularRunes on c.RefKeys = PopularRunes.ChampionID\n" +
                            "left join Rune r on r.ID = PopularRunes.RID\n" +
                            "where c.Name='"+ championSelected +"'\n" +
                            "UNION\n" +
                            "select 'Spell' as Type, s.Name as Name from Champion c\n" +
                            "left join PopularSummonerSpells on c.RefKeys = PopularSummonerSpells.ChampionKey\n" +
                            "left join SummonerSpell s on s.ID = PopularSummonerSpells.SSID\n" +
                            "where c.Name='"+ championSelected +"'";
        }
        else if (selected.equals("Most well-rounded champions within a class")){
            lblResults.setText("MOST WELL-ROUNDED " + classSelected.toUpperCase());
            parseSelected = parseClass(classSelected);
            currentQuery =
                    "select c.Name as Champion, round(((c.HP + c.MP + c.HPPerLevel + c.MPPerLevel + c.HPRegen + c.MPRegen + c.HPRegenPerLevel + \n" +
                            "c.MPRegenPerLevel + c.MagicResist + c.MagicResistPerLevel + c.Armor + c.ArmorPerLevel + MoveSpeed + \n" +
                            "c.AttackDamage + c.AttackRange + c.AttackSpeed + c.AttackDamagePerLevel + c.AttackSpeedPerLevel)/18),1) as AvgStat from Champion c\n" +
                            "left join Class on c.RefKeys = Class.RefKeys\n" +
                            "where Class.Classes like '%"+parseSelected+"%'\n" +
                            "group by c.RefKeys\n" +
                            "order by AvgStat DESC, c.Name ASC\n";
        }
        else if (selected.equals("Most versatile champions within a class")){
            lblResults.setText("MOST VERSATILE " + classSelected.toUpperCase());
            parseSelected = parseClass(classSelected);
            currentQuery =
                    "select c.Name as Champion, count(distinct i.ItemID) as Items, count(distinct r.RID) as Runes, count(distinct s.SSID) as Spells, (count(distinct i.ItemID) + count(distinct r.RID) + count(distinct s.SSID)) as PopularWith from Champion c\n" +
                            "left join Class on c.RefKeys = Class.RefKeys\n" +
                            "left join PopularItems i on c.RefKeys = i.ChampionKey\n" +
                            "left join PopularRunes r on c.RefKeys = r.ChampionID\n" +
                            "left join PopularSummonerSpells s on c.RefKeys = s.ChampionKey\n" +
                            "where Class.Classes like '%"+parseSelected+"%'\n" +
                            "group by c.RefKeys\n" +
                            "order by PopularWith DESC, c.Name ASC";
        }
        else if (selected.equals("Champions who use a mana-alternative within a class")){
            lblResults.setText(classSelected.toUpperCase() + " WHO USE A MANA-ALTERNATIVE");
            parseSelected = parseClass(classSelected);
            currentQuery =
                    "select Name, ResourceType from Champion\n" +
                            "left join Class on Champion.RefKeys = Class.RefKeys\n" +
                            "where ResourceType != 'Mana' and ResourceType != 'None' and Classes like '%"+parseSelected+"%'\n" +
                            "group by ResourceType order by Name ASC";
        }
        else if (selected.equals("Champions by lowest basic ability cooldown in a class")){
            lblResults.setText(classSelected.toUpperCase() + " BY AVERAGE BASIC ABILITY COOLDOWN");
            parseSelected = parseClass(classSelected);
            currentQuery =
                    "select c.Name, (sum(cd.Cooldown)/4) as AvgCoolDown from Champion c\n" +
                            "left join Cooldown cd on c.RefKeys = cd.ChampionID \n" +
                            "left join Class on c.RefKeys = Class.RefKeys\n" +
                            "where Class.Classes like '%" + parseSelected + "%' and cd.rank=0 and cd.Cooldown < 60\n" +
                            "and cd.ID not like 'AurelionSolE' and cd.ID not like 'WarwickW'\n" +
                            "group by c.ID\n" +
                            "order by AvgCoolDown ASC, c.Name ASC\n";
        }
        else if (selected.equals("Available champion skins by skinline")){
            lblResults.setText("SKINS WITHIN " + skinlineSelected.toUpperCase() + " SKINLINE");
            currentQuery =
                    "select Skin.Name as Skin, Champion.Name as Champion from Skin\n" +
                            "left join Champion on Skin.ChampionID = Champion.RefKeys\n" +
                            "where Skin.Name like '" + skinlineSelected + "%'\n";
        }
        else if (selected.equals("All fully built items")){
            lblResults.setText("ALL FULLY BUILT ITEMS");
            currentQuery =
                    "select distinct Item.Name, Item.TotalGold\n" +
                            "from Item\n" +
                            "left join BuildsFrom on item.ID = BuildsFrom.Item1\n" +
                            "where Item.ID in (select distinct BuildsFrom.Item1 from BuildsFrom) and Item.ID not in (select distinct BuildsFrom.Item2 from BuildsFrom) \n" +
                            "order by TotalGold";
        }
        else if (selected.equals("Most popular items to build a given item into")){
            lblResults.setText("POPULAR ITEMS TO BUILD " + itemSelected.toUpperCase() + " INTO");
            currentQuery =
                    "select i.Name as Item, j.Name as BuildsInto, count(PopularItems.ItemID) as ChampsPopularWith from Item i\n" +
                            "left join BuildsInto on i.ID = BuildsInto.Item1\n" +
                            "left join Item j on BuildsInto.Item2 = j.ID\n" +
                            "left join PopularItems on PopularItems.ItemID = j.ID\n" +
                            "where Item like '%"+ itemSelected + "%'\n" +
                            "group by j.ID\n" +
                            "order by ChampsPopularWith desc\n";
        }
        else if (selected.equals("Champions at max level with the highest value for a stat")){
            lblResults.setText("MAX LEVEL CHAMPIONS WITH HIGHEST " + statSelected.toUpperCase());
            parseSelected = parseChampStat(statSelected);
            currentQuery =
                    "select c.Name as Champion, c."+parseSelected+" as Base"+parseSelected+", c."+parseSelected+"PerLevel, (c."+parseSelected+" + c."+parseSelected+"PerLevel*17) as MaxLevel"+parseSelected+"\n" +
                            "from Champion c order by (c."+parseSelected+" + c."+parseSelected+"PerLevel*17) DESC";
        }
        else if (selected.equals("Items by their stat/cost efficiency given a stat")){
            lblResults.setText("ITEMS BY " + itemstatSelected.toUpperCase() + "/COST EFFICIENCY");
            System.out.println("Eeadasdsad");
            parseSelected = parseItemStat(itemstatSelected);
            currentQuery =
                    "select i.Name as Item, s.StatValue as StatGain, i.TotalGold as Cost, ROUND((1.0*s.StatValue)/(1.0*i.TotalGold),4) as Ratio from Item i\n" +
                            "left join ItemStats s on i.ID = s.ID\n" +
                            "where s.StatTypes like '%" + parseSelected + "%'\n" +
                            "order by Ratio DESC, Item ASC\n";
        }
        else if (selected.equals("Most popular keystone runes within a class")){
            lblResults.setText("MOST POPULAR KEYSTONE RUNES FOR " + classSelected.toUpperCase());
            parseSelected = parseClass(classSelected);
            currentQuery =
                    "select r.Name as Rune, r.Path as Path, count(rs.RID) as Champions from Rune r\n" +
                            "left join PopularRunes rs on r.ID = rs.RID\n" +
                            "left join Champion c on rs.ChampionID = c.RefKeys\n" +
                            "left join Class on c.RefKeys = Class.RefKeys\n" +
                            "where Class.Classes like '%" + parseSelected + "%' and r.Placement=0\n" +
                            "group by r.ID\n" +
                            "order by Champions DESC, c.Name ASC\n";
        }
        else if (selected.equals("Game modes available given a map")){
            lblResults.setText("GAME MODES AVAILABLE IN " + mapSelected.toUpperCase());
            currentQuery =
                    "select Map.Name as Map, Gamemode.Name as Mode, Gamemode.MapID from Gamemode\n" +
                            "left join Map on Map.ID = Gamemode.MapID\n" +
                            "where Map.Name='"+ mapSelected +"'" +
                            "order by Mode";
        }
        else if (selected.equals("Relevant ally/enemy tips given a champion")){
            lblResults.setText("RELEVANT TIPS FOR " + championSelected.toUpperCase());
            currentQuery =
                    "select 'Ally' as Type, a.AllyTips as Tips from Champion c\n" +
                            "left join AllyTips a on c.RefKeys = a.RefKeys\n" +
                            "where c.Name like '" + championSelected +"'\n" +
                            "UNION\n" +
                            "select 'Enemy', e.EnemyTips from Champion c\n" +
                            "left join EnemyTips e on c.RefKeys = e.RefKeys\n" +
                            "where c.Name like '" + championSelected +"'\n";
        }

        txtResults.setText(selectQuery(currentQuery));
    }

    // GENERATES A QUERY FOR A TABLE SELECTION
    private void tableResults(){
        if (selected.equals("Champions")){
            lblResults.setText("ALL CHAMPIONS");
            currentQuery = "select * from Champion";
        }
        else if (selected.equals("Abilities")){
            lblResults.setText("ALL ABILITIES");
            currentQuery = "select * from Ability";
        }
        else if (selected.equals("Skins")){
            lblResults.setText("ALL SKINS");
            currentQuery = "select * from Skin";
        }
        else if (selected.equals("Items")){
            lblResults.setText("ALL ITEMS");
            currentQuery = "select * from Item";
        }
        else if (selected.equals("Runes")){
            lblResults.setText("ALL RUNES");
            currentQuery = "select * from Rune";
        }
        else if (selected.equals("Summoner Spells")){
            lblResults.setText("ALL SUMMONER SPELLS");
            currentQuery = "select * from SummonerSpell";
        }
        else if (selected.equals("Maps")){
            lblResults.setText("ALL MAPS");
            currentQuery = "select * from Map";
        }
        else if (selected.equals("Game Modes")){
            lblResults.setText("ALL GAME MODES");
            currentQuery = "select * from Gamemode";
        }
        else if (selected.equals("Ally Tips")){
            lblResults.setText("ALL ALLY TIPS");
            currentQuery = "select * from AllyTips";
        }
        else if (selected.equals("Enemy Tips")){
            lblResults.setText("ALL ENEMY TIPS");
            currentQuery = "select * from EnemyTips";
        }
        else if (selected.equals("Item Colloquialisms")){
            lblResults.setText("ALL ITEM COLLOQUIALISMS");
            currentQuery = "select * from Colloq";
        }
        else if (selected.equals("Item Stats")){
            lblResults.setText("ALL ITEM STATS");
            currentQuery = "select * from ItemStats";
        }
        else if (selected.equals("Ability Cooldowns")){
            lblResults.setText("ALL ABILITY COOLDOWNS");
            currentQuery = "select * from Cooldown";
        }
        else if (selected.equals("Ability Ranges")){
            lblResults.setText("ALL ABILITY RANGES");
            currentQuery = "select * from Range";
        }
        else if (selected.equals("Ability Costs")){
            lblResults.setText("ALL ABILITY COSTS");
            currentQuery = "select * from Cost";
        }
        else if (selected.equals("Ability Tags")){
            lblResults.setText("ALL ABILITY TAGS");
            currentQuery = "select * from Tags";
        }
        else if (selected.equals("Rune Descriptions")){
            lblResults.setText("ALL RUNE DESCRIPTIONS");
            currentQuery = "select * from RuneDescription";
        }
        else if (selected.equals("Item Builds-From")){
            lblResults.setText("ALL ITEM BUILDS-FROM RELATIONS");
            currentQuery = "select * from BuildsFrom";
        }
        else if (selected.equals("Item Builds-Into")){
            lblResults.setText("ALL ITEM BUILDS-INTO RELATIONS");
            currentQuery = "select * from BuildsInto";
        }
        else if (selected.equals("Runes Available")){
            lblResults.setText("ALL RUNE AVAILABILITIES");
            currentQuery = "select * from RuneAvailability";
        }
        else if (selected.equals("Spells Available")){
            lblResults.setText("ALL SUMMONER SPELL AVAILABILITIES");
            currentQuery = "select * from SummonerSpellAvailability";
        }
        else if (selected.equals("Items Available")){
            lblResults.setText("ALL ITEM AVAILABILITIES");
            currentQuery = "select * from ITEM_ON_MAP";
        }
        else if (selected.equals("Popular Runes")){
            lblResults.setText("ALL POPULAR RUNES");
            currentQuery = "select * from PopularRunes";
        }
        else if (selected.equals("Popular Items")){
            lblResults.setText("ALL POPULAR ITEMS");
            currentQuery = "select * from PopularItems";
        }
        else if (selected.equals("Popular Spells")){
            lblResults.setText("ALL POPULAR SUMMONER SPELLS");
            currentQuery = "select * from PopularSummonerSpells";
        }
        txtResults.setText(selectQuery(currentQuery));
    }

    // ---------------------------------------------------
    // SEND/RECEIVE QUERY
    // ---------------------------------------------------

    // SENDS A QUERY THRU THE DATABASE AND RETURNS A FORMATTED STRING OF THE RESULTS
    private String selectQuery(String query) {
        StringBuilder str = new StringBuilder();
        String basen";
        String line = base;
        String colName;
        int numRow = 1;

        str.append(line);

        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);
            ResultSetMetaData metaData = resultSet.getMetaData();

            while (resultSet.next()) {
                str.append(numRow + "   ");
                int numCols = metaData.getColumnCount();
                for(int i = 1; i <= numCols; i++) {
                    colName = metaData.getColumnName(i);
                    // result += colName.toUpperCase(Locale.ROOT) + ": " + resultSet.getString(i);
                    str.append(colName.toUpperCase(Locale.ROOT) + ": " + resultSet.getString(i));
                    if (i!=numCols)
                        //result+= "  --  ";
                        str.append("  --  ");
                }
                str.append("\n" + line);
                numRow++;
            }
            resultSet.close();
            statement.close();
        }
        catch (SQLException e) {
            e.printStackTrace(System.out);
        }
        if (str.toString().equals(base)){
            str.append("No results found!\n");
            str.append(base);
        }
        return str.toString();
    }

    // SENDS A QUERY THRU THE DATABASE AND GENERATES A CSV OF THE RESULTS
    private void generateCSV(String query) {

        try {
            FileWriter writer = new FileWriter("results.csv");

            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);
            ResultSetMetaData metaData = resultSet.getMetaData();
            int numCols = metaData.getColumnCount();


            for(int i = 1; i <= numCols; i++) {
                writer.write(metaData.getColumnName(i)+",");
            }
            writer.write("\n");

            while(resultSet.next()) {
                for(int i = 1; i <= numCols; i++) {
                    writer.write(resultSet.getString(i)+",");
                }
                writer.write("\n");
            }

            writer.close();

        } catch (SQLException e) {
            e.printStackTrace(System.out);
        } catch(IOException e) {
            e.printStackTrace(System.out);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnQueries;
    private javax.swing.JButton btnResultsSave;
    private javax.swing.JButton btnTables;
    private javax.swing.JComboBox<String> cmbChampionSelect;
    private javax.swing.JComboBox<String> cmbClassSelect;
    private javax.swing.JComboBox<String> cmbGameModeSelect;
    private javax.swing.JComboBox<String> cmbItemSelect;
    private javax.swing.JComboBox<String> cmbItemStatSelect;
    private javax.swing.JComboBox<String> cmbQueries;
    private javax.swing.JComboBox<String> cmbSkinLineSelect;
    private javax.swing.JComboBox<String> cmbStatSelect;
    private javax.swing.JComboBox<String> cmbTables;
    private javax.swing.JLabel imgBackground;
    private javax.swing.JLabel imgLogo;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblResults;
    private javax.swing.JLabel lblResultsHead;
    private javax.swing.JLabel lblSelect;
    private javax.swing.JLabel lblSelectInput;
    private javax.swing.JScrollPane scrResults;
    private javax.swing.JTextPane txtResults;
    // End of variables declaration//GEN-END:variables
}
